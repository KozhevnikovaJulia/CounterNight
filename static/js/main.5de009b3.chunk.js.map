{"version":3,"sources":["CounterInputs.module.css","CounterResult.module.css","Button.module.css","DisplayInputs.tsx","Button.tsx","localStorage.ts","State/reducer.tsx","CounterInputs.tsx","DisplayResult.tsx","CounterResult.tsx","AppWithRedux.tsx","reportWebVitals.ts","State/Store/store.ts","index.tsx","DisplayInputs.module.css","DisplayResult.module.css"],"names":["module","exports","DisplayInputs","props","className","s","containerInputs","inputsArea","errorMaxInput","errorInput","input","type","value","maxValue","onChange","onChangeMaxInput","data-currency","errorStartInput","startValue","onChangeStartInput","Button","button","disabled","incDisable","resetDisable","setDisable","onClick","incCallBack","resetCallBack","setCallBack","title","saveState","key","state","stateAsString","JSON","stringify","localStorage","setItem","restoreState","defaultState","getItem","parse","x","y","initialState","number","warning","CounterInputs","dispatch","useDispatch","React","useEffect","action","restoreMaxValue","changeMaxValueToRestoreAC","restoreStartValue","changeStartValueToRestoreAC","displayInputs","e","maxInputValue","currentTarget","startInputValue","buttons","String","DisplayResult","spanInterValue","containerResultError","containerResult","CounterResult","displayResult","App","useSelector","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","Number","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5de009b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayInputs\":\"CounterInputs_displayInputs__1m9FA\",\"buttons\":\"CounterInputs_buttons__2S-fx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayResult\":\"CounterResult_displayResult__1wF5r\",\"buttons\":\"CounterResult_buttons__1M87q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1Rxd9\"};","import React, {ChangeEvent, useState} from 'react';\nimport s from \"./DisplayInputs.module.css\";\n\ntype DisplayInputsPropsType={\n  // onChangeInput:(e:ChangeEvent<HTMLInputElement>) => void\n  onChangeMaxInput:(e:ChangeEvent<HTMLInputElement>) => void\n  onChangeStartInput:(e:ChangeEvent<HTMLInputElement>) => void\n  maxValue: number\n  startValue: number\n  errorMaxInput: boolean\n  errorStartInput: boolean\n  \n}\n\nexport function DisplayInputs(props: DisplayInputsPropsType) {\n  return (\n    <div className={s.containerInputs}>\n      <div className={s.inputsArea}>\n      <span> max value</span> <input className={props.errorMaxInput? s.errorInput : s.input}  type=\"number\" value={props.maxValue} onChange={props.onChangeMaxInput} data-currency=\"max\"/>\n      <span>start value</span> <input className={props.errorStartInput? s.errorInput : s.input}  type=\"number\" value={props.startValue} onChange={props.onChangeStartInput} data-currency=\"start\"/>\n      </div>\n    </div>\n  );\n}\n\n","import React from 'react';\nimport s from \"./Button.module.css\";\n\ntype ButtonProps = {\n  title: string\n  incCallBack?: () => void\n  resetCallBack?: () => void\n  setCallBack?: () => void\n  resetDisable?:boolean \n  incDisable?:boolean  \n  setDisable?:boolean   \n      \n     }\n\nexport function Button(props: ButtonProps) {\n   \n  const onClickButton = () => {\n    if (props.incCallBack){props.incCallBack()}\n    else if (props.resetCallBack){props.resetCallBack()}\n    else if(props.setCallBack){props.setCallBack()}\n    else {}\n  }\n  return (\n   <div >\n   \n<button className={s.button} disabled={props.incDisable ? props.incDisable : props.resetDisable || props.setDisable} onClick={onClickButton }>\n    {props.title}</button>\n    </div>\n);\n}\n","// вот вам функция для сохранения объектов в память браузера\n// (данные в этом хранилище сохраняться даже при перезагрузке компа):\nexport function saveState<T>(key: string, state: T) {\n    const stateAsString = JSON.stringify(state);\n    localStorage.setItem(key, stateAsString)\n}\n\n// и вот вам функция для получения сохранённого объекта в памяти браузера:\nexport function restoreState<T>(key: string, defaultState: T) {\n    const stateAsString = localStorage.getItem(key);\n    if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\n    return defaultState;\n}\n\n// ---------------------------------------------------------------------------------------------------------------\n// использование:\ntype StateType = {\n    x: string\n    y: number\n}\n\n// сохраняем объект типа StateType в ячейке \"test\"\nsaveState<StateType>(\"test\", {x: \"A\", y: 1});\n\n// получем в переменную state объект из ячейки \"test\" или дэфолтный объект если ячейка пуста\nconst state: StateType = restoreState<StateType>(\"test\", {x: \"\", y: 0});\n","type ActionType = \r\n| ReturnType<typeof incCallBackAC>\r\n| ReturnType<typeof resetCallBackAC>\r\n| ReturnType<typeof setCallBackAC>\r\n| ReturnType<typeof onChangeMaxInputAC> \r\n| ReturnType<typeof onChangeStartInputAC> \r\n| ReturnType<typeof changeMaxValueToRestoreAC> \r\n| ReturnType<typeof changeStartValueToRestoreAC> \r\n\r\n\r\nexport type StateType = {\r\nnumber: number\r\nmaxValue: number\r\nstartValue: number    \r\nincDisable: boolean\r\nresetDisable: boolean\r\nsetDisable: boolean\r\nerrorMaxInput: boolean\r\nerrorStartInput: boolean\r\nwarning:boolean\r\n}\r\nconst initialState: StateType = {\r\n    number: 0,\r\n    maxValue: 5,\r\n    startValue: 0,\r\n    incDisable: false,\r\n    resetDisable: true,\r\n    setDisable: true,\r\n    errorMaxInput: false,\r\n    errorStartInput: false,\r\n    warning:false  \r\n}\r\n\r\nexport let reducer = (state: StateType = initialState , action: ActionType): StateType  => {\r\n    switch (action.type) {\r\n        case \"INC-CALLBACK\": {\r\n            let stateCopy = {...state}\r\n            stateCopy.number=stateCopy.number+1\r\n            stateCopy.resetDisable=false           \r\n            if ( stateCopy.number >= stateCopy.maxValue){\r\n                stateCopy.incDisable=true    \r\n            }                    \r\n            return stateCopy\r\n        }\r\n\r\n        case \"RESET-CALLBACK\": {\r\n            let stateCopy = {...state}\r\n            stateCopy.number=stateCopy.startValue\r\n            stateCopy.incDisable=false           \r\n            if ( stateCopy.number <= stateCopy.startValue){\r\n                stateCopy.resetDisable=true    \r\n            } \r\n             \r\n            return stateCopy\r\n        }\r\n        case \"ONCHANGE-MAXINPUT\": {\r\n            let stateCopy = {...state}\r\n            stateCopy.maxValue=Number(action.maxInputValue) \r\n            stateCopy.incDisable=true \r\n            stateCopy.resetDisable=true\r\n            stateCopy.setDisable=false     \r\n            stateCopy.warning=true    \r\n            if (Number(action.maxInputValue) <= stateCopy.startValue || Number(action.maxInputValue) < 0) {\r\n                stateCopy.errorMaxInput = true\r\n                stateCopy.setDisable = true\r\n            } else {\r\n                stateCopy.errorMaxInput = false\r\n                stateCopy.setDisable = false\r\n            }  \r\n            return stateCopy\r\n        }\r\n        case \"ONCHANGE-STARTINPUT\": {\r\n            let stateCopy = {...state}\r\n            stateCopy.startValue=Number(action.startInputValue) \r\n            stateCopy.incDisable=true \r\n            stateCopy.resetDisable=true\r\n            stateCopy.setDisable=false \r\n            stateCopy.warning=true \r\n            if (Number(action.startInputValue) >= stateCopy.maxValue || Number(action.startInputValue) < 0) {\r\n                stateCopy.errorStartInput = true\r\n                stateCopy.setDisable = true\r\n            } else {\r\n                stateCopy.errorStartInput = false\r\n                stateCopy.setDisable = false\r\n            }                 \r\n            return stateCopy\r\n        }\r\n        case \"SET-CALLBACK\": {\r\n            let stateCopy = {...state} \r\n                    \r\n            stateCopy.number=stateCopy.startValue\r\n            stateCopy.incDisable=false  \r\n            stateCopy.setDisable=true    \r\n            stateCopy.warning=!stateCopy.warning              \r\n                   \r\n            return stateCopy\r\n        }\r\n\r\n        case \"CHANGE=MAXVALUE-TORESTORE\": {\r\n            let stateCopy = { ...state }\r\n            stateCopy.maxValue = (Number(action.restoreMaxValue))\r\n            return stateCopy\r\n        }\r\n\r\n        case \"CHANGE=STARTVALUE-TORESTORE\": {\r\n            let stateCopy = {...state}            \r\n            stateCopy.startValue = (Number(action.restoreStartValue))  \r\n            stateCopy.number = (Number(action.restoreStartValue))                 \r\n            return stateCopy\r\n        }\r\n               default: return state;\r\n            \r\n    }\r\n}\r\n\r\n\r\nexport const incCallBackAC = () => {\r\n    return { type: \"INC-CALLBACK\"} as const\r\n } \r\n export const resetCallBackAC = () => {\r\n    return { type: \"RESET-CALLBACK\"} as const\r\n } \r\n export const setCallBackAC = () => {\r\n    return { type: \"SET-CALLBACK\"} as const\r\n } \r\n export const onChangeMaxInputAC = (maxInputValue:string) => {\r\n    return { type: \"ONCHANGE-MAXINPUT\", maxInputValue} as const\r\n } \r\n export const onChangeStartInputAC = (startInputValue:string) => {\r\n    return { type: \"ONCHANGE-STARTINPUT\", startInputValue} as const\r\n } \r\n export const changeMaxValueToRestoreAC = (restoreMaxValue:string) => {\r\n    return { type: \"CHANGE=MAXVALUE-TORESTORE\", restoreMaxValue} as const\r\n } \r\n export const changeStartValueToRestoreAC = (restoreStartValue:string) => {\r\n    return { type: \"CHANGE=STARTVALUE-TORESTORE\", restoreStartValue} as const\r\n } \r\n","import React, {ChangeEvent, useState} from \"react\";\nimport './App.css';\nimport {DisplayInputs} from \"./DisplayInputs\"\nimport s from \"./CounterInputs.module.css\";\nimport {Button} from \"./Button\";\nimport {restoreState, saveState} from \"./localStorage\";\nimport {setCallBackAC, onChangeMaxInputAC, onChangeStartInputAC,changeMaxValueToRestoreAC,\n     changeStartValueToRestoreAC } from \"./State/reducer\";\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {AppRootStateType} from \"./State/Store/store\";\nimport {StateType} from \"./State/reducer\"\n\ntype CounterInputsPropsType ={\n  maxValue:number\n  startValue:number\n  // setMaxValue:(n:number)=> void\n  // setStartValue:(n:number) => void\n  number: number\n  // setNumber: (number: number)=> void\n  warning: boolean\n  // setWarning:(warning: boolean)=> void\n  // setErrorMaxInput: (errorMaxInput: boolean)=> void\n  // setErrorStartInput: (errorStartInput: boolean)=> void\n  errorMaxInput: boolean\n  errorStartInput: boolean\n  setDisable: boolean\n  // setSetDisable: (setDisable: boolean)=> void\n}\n\n\n  export function CounterInputs(props:CounterInputsPropsType) {\n    // const state = useSelector<AppRootStateType, StateType>(state =>state.state)\n    const dispatch = useDispatch()\n\n  \n   \n    const onChangeMaxInput = (e: ChangeEvent<HTMLInputElement>) => {  \n        const action = onChangeMaxInputAC(e.currentTarget.value)\n        dispatch(action)        \n            }\n            \n    const onChangeStartInput = (e: ChangeEvent<HTMLInputElement>) => {\n        const action = onChangeStartInputAC(e.currentTarget.value)\n        dispatch(action)        \n            }               \n           \n             \n          // функции для localStorage\n        const saveMaxValue = () =>  { saveState<string>(\"maxValueCounter\", String(props.maxValue)) }\n        const saveStartValue = () => { saveState<string>(\"startValueCounter\", String(props.startValue)) }\n        \n    const restoreMaxValue = () => {\n        let restoreMaxValue_: string = restoreState<string>(\"maxValueCounter\", \"\")\n        const action = changeMaxValueToRestoreAC(restoreMaxValue_)\n        dispatch(action)                 \n    }\n\n    const restoreStartValue = () => {\n        let restoreStartValue_: string = restoreState<string>(\"startValueCounter\", \"\")\n        const action = changeStartValueToRestoreAC (restoreStartValue_)\n        dispatch(action)       \n    }\n\n\n    const setCallBack = ()=> { \n        // props.setMaxValue (props.maxValue)\n        // props.setStartValue(props.startValue)\n        const action = setCallBackAC()\n        dispatch(action)       \n        saveMaxValue ()\n        saveStartValue()\n                           }\n   \n    React.useEffect(() => {\n        restoreMaxValue()\n        restoreStartValue()\n    }, [])\n\n   \n\n    return (\n        <div className={s.displayInputs}>\n            <DisplayInputs\n             maxValue={props.maxValue}\n             startValue={props.startValue}\n            //  onChangeInput={onChangeInput}\n            onChangeMaxInput={onChangeMaxInput}\n            onChangeStartInput = {onChangeStartInput}\n             errorMaxInput={props.errorMaxInput}\n             errorStartInput= {props.errorStartInput}\n             />\n\n            <div className={s.buttons}>\n                <Button title=\"set\" setCallBack={setCallBack} setDisable={props.setDisable} />\n            </div>\n\n        </div>\n  );\n}\n\n\n\n\n\n\n// const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n//     if (e.currentTarget.dataset.currency) {\n//         const trigger: string = e.currentTarget.dataset.currency;\n//         if (trigger === 'max') {\n//             props.setMaxValue(Number(e.currentTarget.value));\n//             props.setSetDisable(false)\n//             props.setWarning(true)\n//             if (Number(e.currentTarget.value) <= props.startValue || Number(e.currentTarget.value) < 0) {\n//                 props.setErrorMaxInput(true)\n//                 props.setSetDisable(true)\n//             } else {\n//                 props.setErrorMaxInput(false)\n//                 props.setSetDisable(false)\n//             }\n//         } else {\n//             props.setStartValue (Number(e.currentTarget.value));\n//             props.setSetDisable(false)\n//             props.setWarning(true)\n//             if (Number(e.currentTarget.value) >= props.maxValue || Number(e.currentTarget.value) < 0) {\n//                 props.setErrorStartInput(true)\n//                 props.setSetDisable(true)\n//             }\n//             else {\n//                 props.setErrorStartInput(false)\n//                 props.setSetDisable(false)\n//             }\n//         }\n         \n// }\n// }\n\n\n   ","import React from 'react';\nimport s from \"./DisplayResult.module.css\";\n\n\ntype DisplayResultPropsType={\n  number: number\n  maxValue: number\n  startValue: number\n  warning: boolean\n  errorMaxInput: boolean\n  errorStartInput: boolean\n }\n\nexport function DisplayResult (props: DisplayResultPropsType) {\n     \n  return (\n    <div >\n    {props.warning ? <div className={s.spanInterValue}>  {props.errorMaxInput || props.errorStartInput? \"Incorrect value!\" : \"Enter values and press 'set'\"}</div>\n    : <div className={props.number >= props.maxValue || props.number< props.startValue ? s.containerResultError  : s.containerResult}>{props.number} </div> }\n    \n    </div>\n  );\n}\n\n","import React, { useState, ChangeEvent } from 'react';\nimport {Button} from \"./Button\";\nimport {DisplayResult} from \"./DisplayResult\"\nimport s from \"./CounterResult.module.css\";\n\ntype CounterResultPropsType ={\n    maxValue:number\n    startValue:number   \n    number:number\n    // setNumber: (number: number)=> void\n    incCallBack:()=> void\n    resetCallBack: ()=> void\n    warning: boolean\n    errorMaxInput: boolean\n    errorStartInput: boolean   \n    incDisable: boolean\n    resetDisable: boolean\n    }\n\nexport function CounterResult(props:CounterResultPropsType ) {\n     return (\n    <div className={s.displayResult}>\n            <DisplayResult\n             number={props.number}\n             maxValue={props.maxValue}\n             startValue={props.startValue}\n             warning={props.warning}\n             errorMaxInput={props.errorMaxInput}\n             errorStartInput={props.errorStartInput} \n             />\n        <div className={s.buttons}>\n            <Button title=\"inc\" incCallBack={props.incCallBack} incDisable={props.incDisable}\n             />\n            <Button title=\"reset\" resetCallBack={props.resetCallBack} resetDisable={props.resetDisable}\n              />\n           \n        </div>\n\n    </div>\n  );\n}\n","import React,  {useState, useReducer} from 'react';\nimport './App.css';\nimport {CounterInputs} from \"./CounterInputs\";\nimport {CounterResult} from \"./CounterResult\";\nimport {reducer, incCallBackAC, resetCallBackAC} from \"./State/reducer\"\nimport {AppRootStateType} from \"./State/Store/store\";\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {StateType} from \"./State/reducer\"\n\nexport function App() {\n  const state = useSelector<AppRootStateType, StateType>(state => state.state)\n  const dispatch = useDispatch()\n\n// let [state,dispatch] = useReducer(reducer, {\n//   number: 0,\n//   maxValue: 5,\n//   startValue: 0,\n//   incDisable: false,\n//   resetDisable: true,\n//   setDisable: true,\n//   errorMaxInput: false,\n//   errorStartInput: false,\n//   warning:false  \n// })\n\n  const incCallBack = () => {\n    const action = incCallBackAC()\n    dispatch(action)\n  }\n  const resetCallBack = () => {\n    const action = resetCallBackAC()\n   dispatch(action)\n  }\n\n   return (\n    <div className=\"container\">\n      <CounterInputs \n       maxValue={state.maxValue}\n       startValue={state.startValue}      \n       number={state.number}      \n       warning={state.warning}       \n       errorMaxInput={state.errorMaxInput}\n       errorStartInput={state.errorStartInput}\n       setDisable={state.setDisable}\n        />\n      <CounterResult\n       maxValue={state.maxValue}\n       startValue={state.startValue}    \n       number={state.number} \n       incCallBack={incCallBack}\n       resetCallBack={resetCallBack}\n       warning={state.warning}\n       errorMaxInput={state.errorMaxInput}\n       errorStartInput={state.errorStartInput}\n       incDisable={state.incDisable}\n       resetDisable={state.resetDisable}\n       />\n        </div>\n    \n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { reducer } from \"../reducer\";\r\nimport {combineReducers, createStore} from \"redux\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    state: reducer      \r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type AppRootStateType = ReturnType <typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './AppWithRedux';\n// import {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './State/Store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerInputs\":\"DisplayInputs_containerInputs__11feO\",\"containerInputsError\":\"DisplayInputs_containerInputsError__3pkks\",\"inputsArea\":\"DisplayInputs_inputsArea__3J_mq\",\"input\":\"DisplayInputs_input__2lj2-\",\"errorInput\":\"DisplayInputs_errorInput__rkIS9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerResult\":\"DisplayResult_containerResult__3zpDr\",\"containerResultError\":\"DisplayResult_containerResultError__1ox4d\",\"spanInterValue\":\"DisplayResult_spanInterValue__2vfAA\"};"],"sourceRoot":""}