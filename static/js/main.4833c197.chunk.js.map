{"version":3,"sources":["DisplayInputs.module.css","DisplayResult.module.css","CounterInputs.module.css","CounterResult.module.css","Button.module.css","DisplayInputs.tsx","Button.tsx","localStorage.ts","CounterInputs.tsx","DisplayResult.tsx","CounterResult.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","DisplayInputs","props","className","s","containerInputs","inputsArea","errorInput1","errorInput","input","type","value","valueInput1","onChange","onChangeInput","data-currency","errorInput2","valueInput2","Button","button","disabled","incDisable","resetDisable","setDisable","onClick","incCallBack2","resetCallBack2","setCallBack","title","saveState","key","state","stateAsString","JSON","stringify","localStorage","setItem","restoreState","defaultState","getItem","parse","x","y","CounterInputs","useState","setSetDisable","setValueInput1","setValueInput2","React","useEffect","restoreMaxValue_","Number","changeMaxValue","restoreMaxValue","restoreStartValue_","changeStartValue","setNumber","restoreStartValue","displayInputs","e","currentTarget","dataset","currency","enterValueTrue","setErrorInput1","setErrorInput2","buttons","toggleEnterValue","enterValue","String","DisplayResult","spanInterValue","number","maxValue","startValue","containerResultError","containerResult","CounterResult","setIncDisable","setResetDisable","displayResult","incCallBack","resetCallBack","App","setEnterValue","setMaxValue","setStartValue","n","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4833c197.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerInputs\":\"DisplayInputs_containerInputs__11feO\",\"containerInputsError\":\"DisplayInputs_containerInputsError__3pkks\",\"inputsArea\":\"DisplayInputs_inputsArea__3J_mq\",\"input\":\"DisplayInputs_input__2lj2-\",\"errorInput\":\"DisplayInputs_errorInput__rkIS9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerResult\":\"DisplayResult_containerResult__3zpDr\",\"containerResultError\":\"DisplayResult_containerResultError__1ox4d\",\"spanInterValue\":\"DisplayResult_spanInterValue__2vfAA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayInputs\":\"CounterInputs_displayInputs__1m9FA\",\"buttons\":\"CounterInputs_buttons__2S-fx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayResult\":\"CounterResult_displayResult__1wF5r\",\"buttons\":\"CounterResult_buttons__1M87q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1Rxd9\"};","import React, {ChangeEvent, useState} from 'react';\nimport s from \"./DisplayInputs.module.css\";\n\ntype DisplayInputsPropsType={\n  // onChangeInput1:(e:ChangeEvent<HTMLInputElement>) => void\n  // onChangeInput2:(e:ChangeEvent<HTMLInputElement>) => void\n  onChangeInput:(e:ChangeEvent<HTMLInputElement>) => void\n  valueInput1: number\n  valueInput2: number\n  errorInput1: boolean\n  errorInput2: boolean\n  \n}\n\nexport function DisplayInputs(props: DisplayInputsPropsType) {\n  return (\n    <div className={s.containerInputs}>\n      <div className={s.inputsArea}>\n      <span> max value</span> <input className={props.errorInput1? s.errorInput : s.input}  type=\"number\" value={props.valueInput1} onChange={props.onChangeInput} data-currency=\"max\"/>\n      <span>start value</span> <input className={props.errorInput2? s.errorInput : s.input}  type=\"number\" value={props.valueInput2} onChange={props.onChangeInput} data-currency=\"start\"/>\n      </div>\n    </div>\n  );\n}\n\n","import React from 'react';\nimport s from \"./Button.module.css\";\n\ntype ButtonProps = {\n  title: string\n  incCallBack2?: () => void\n  resetCallBack2?: () => void\n  setCallBack?: () => void\n  resetDisable?:boolean \n  incDisable?:boolean  \n  setDisable?:boolean \n      \n     }\n\nexport function Button(props: ButtonProps) {\n   \n  const onClickButton = () => {\n    if (props.incCallBack2){props.incCallBack2()}\n    else if (props.resetCallBack2){props.resetCallBack2()}\n    else if(props.setCallBack){props.setCallBack()}\n    else {}\n  }\n  return (\n   <div >\n   \n<button className={s.button} disabled={props.incDisable ? props.incDisable : props.resetDisable || props.setDisable} onClick={onClickButton }>\n    {props.title}</button>\n    </div>\n);\n}\n\n\n// data-action=\"buy\"\n\n// const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\n//   e.currentTarget.dataset.action === 'buy' ? setAction(true) : setAction(false);\n// };\n{/* <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\nBuy\n</span> */}","// вот вам функция для сохранения объектов в память браузера\n// (данные в этом хранилище сохраняться даже при перезагрузке компа):\nexport function saveState<T>(key: string, state: T) {\n    const stateAsString = JSON.stringify(state);\n    localStorage.setItem(key, stateAsString)\n}\n\n// и вот вам функция для получения сохранённого объекта в памяти браузера:\nexport function restoreState<T>(key: string, defaultState: T) {\n    const stateAsString = localStorage.getItem(key);\n    if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\n    return defaultState;\n}\n\n// ---------------------------------------------------------------------------------------------------------------\n// использование:\ntype StateType = {\n    x: string\n    y: number\n}\n\n// сохраняем объект типа StateType в ячейке \"test\"\nsaveState<StateType>(\"test\", {x: \"A\", y: 1});\n\n// получем в переменную state объект из ячейки \"test\" или дэфолтный объект если ячейка пуста\nconst state: StateType = restoreState<StateType>(\"test\", {x: \"\", y: 0});\n","import React, {ChangeEvent, useState} from \"react\";\nimport './App.css';\nimport {DisplayInputs} from \"./DisplayInputs\"\nimport s from \"./CounterInputs.module.css\";\nimport {Button} from \"./Button\";\nimport {restoreState, saveState} from \"./localStorage\";\n\ntype CounterInputsPropsType ={\n  maxValue:number\n  startValue:number\n  changeMaxValue:(n:number)=>void\n  changeStartValue:(n:number)=>void\n  number: number\n  setNumber: (number: number)=> void\n  enterValue: boolean\n  toggleEnterValue: (enterValue: boolean)=> void\n  enterValueTrue: ()=> void\n  setErrorInput1: (errorInput1: boolean)=> void\n  setErrorInput2: (errorInput2: boolean)=> void\n  errorInput1: boolean\n  errorInput2: boolean\n\n}\n\n\n  export function CounterInputs(props:CounterInputsPropsType) {\n   \n    let [setDisable, setSetDisable] = useState<boolean>(true)\n    let [valueInput1, setValueInput1] = useState<number>(5)\n    let [valueInput2, setValueInput2] = useState<number>(0)\n\n\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget.dataset.currency) {\n            const trigger: string = e.currentTarget.dataset.currency;\n            if (trigger === 'max') {\n                setValueInput1(Number(e.currentTarget.value));\n                setSetDisable(false)\n                props.enterValueTrue()\n                if (Number(e.currentTarget.value) <= valueInput2 || Number(e.currentTarget.value) < 0) {\n                    props.setErrorInput1(true)\n                    setSetDisable(true)\n                } else {\n                    props.setErrorInput1(false)\n                    setSetDisable(false)\n                }\n            } else {\n                setValueInput2(Number(e.currentTarget.value));\n                setSetDisable(false)\n                props.enterValueTrue()\n                if (Number(e.currentTarget.value) >= valueInput1 || Number(e.currentTarget.value) < 0) {\n                    props.setErrorInput2(true)\n                    setSetDisable(true)\n                }\n                else {\n                    props.setErrorInput2(false)\n                    setSetDisable(false)\n                }\n            }\n             \n    }\n}\n\n    // const onChangeInput1 = (e: ChangeEvent<HTMLInputElement>) => {\n    //     setValueInput1(Number(e.currentTarget.value));\n    //     setSetDisable(false)\n    //     props.enterValueTrue()\n    //     if (Number(e.currentTarget.value) <= valueInput2 || Number(e.currentTarget.value) < 0) {\n    //         props.setErrorInput1(true)\n    //         setSetDisable(true)\n    //     } else {\n    //         props.setErrorInput1(false)\n    //         setSetDisable(false)\n    //     }\n    // }\n\n    // const onChangeInput2 = (e: ChangeEvent<HTMLInputElement>) => {\n    //     setValueInput2(Number(e.currentTarget.value));\n    //     setSetDisable(false)\n    //     props.enterValueTrue()\n    //     if (Number(e.currentTarget.value) >= valueInput1 || Number(e.currentTarget.value) < 0) {\n    //         props.setErrorInput2(true)\n    //         setSetDisable(true)\n    //     }\n    //     else {\n    //         props.setErrorInput2(false)\n    //         setSetDisable(false)\n    //     }\n    // }\n\n      // функции для localStorage\n        const saveMaxValue = () =>  { saveState<string>(\"maxValueCounter\", String(valueInput1)) }\n        const saveStartValue = () => { saveState<string>(\"startValueCounter\", String(valueInput2)) }\n    \n    const restoreMaxValue = () => {\n        let restoreMaxValue_: string = restoreState<string>(\"maxValueCounter\", \"\")\n        setValueInput1(Number(restoreMaxValue_))\n        props.changeMaxValue(Number(restoreMaxValue_))\n    }\n\n    const restoreStartValue = () => {\n        let restoreStartValue_: string = restoreState<string>(\"startValueCounter\", \"\")\n        setValueInput2(Number(restoreStartValue_))\n        props.changeStartValue(Number(restoreStartValue_))\n        props.setNumber(Number(restoreStartValue_))\n    }\n\n\n    const setCallBack = ()=> { \n            \n        props.changeMaxValue (valueInput1)\n        props.changeStartValue (valueInput2)\n        props.setNumber(valueInput2)\n        setSetDisable(true)\n        props.toggleEnterValue (props.enterValue)\n        saveMaxValue ()\n        saveStartValue()\n                           }\n   \n    React.useEffect(() => {\n        restoreMaxValue()\n        restoreStartValue()\n    }, [])\n\n   \n\n    return (\n        <div className={s.displayInputs}>\n            <DisplayInputs\n             valueInput1={valueInput1}\n             valueInput2={valueInput2}\n            //  onChangeInput1={onChangeInput1}\n            //  onChangeInput2={onChangeInput2} \n            onChangeInput={onChangeInput}\n             errorInput1={props.errorInput1}\n             errorInput2= {props.errorInput2}/>\n\n            <div className={s.buttons}>\n                <Button title=\"set\" setCallBack={setCallBack} setDisable={setDisable}/>\n            </div>\n\n        </div>\n  );\n}\n\n\n\n\n\n\n        \n\n","import React from 'react';\nimport s from \"./DisplayResult.module.css\";\n\n\ntype DisplayResultPropsType={\n  number: number\n  maxValue: number\n  startValue: number\n  enterValue: boolean\n  errorInput1: boolean\n  errorInput2: boolean\n }\n\nexport function DisplayResult (props: DisplayResultPropsType) {\n     \n  return (\n    <div >\n    {props.enterValue ? <div className={s.spanInterValue}>  {props.errorInput1 || props.errorInput2? \"Incorrect value!\" : \"Enter values and press 'set'\"}</div>\n    : <div className={props.number >= props.maxValue || props.number< props.startValue ? s.containerResultError  : s.containerResult}>{props.number} </div> }\n    \n    </div>\n  );\n}\n\n","import React, { useState, ChangeEvent } from 'react';\nimport {Button} from \"./Button\";\nimport {DisplayResult} from \"./DisplayResult\"\nimport s from \"./CounterResult.module.css\";\n\ntype CounterResultPropsType ={\n    maxValue:number\n    startValue:number\n    changeMaxValue:(n:number)=>void\n    changeStartValue:(n:number)=>void\n    number:number\n    setNumber: (number: number)=> void\n    incCallBack:()=> void\n    resetCallBack: ()=> void\n    enterValue: boolean\n    errorInput1: boolean\n    errorInput2: boolean   \n    }\n\nexport function CounterResult(props:CounterResultPropsType ) {\n   \n    let [incDisable, setIncDisable] = useState<boolean>(false)\n    let [resetDisable, setResetDisable] = useState<boolean>(true)\n\n    let incCallBack2 = () => {  props.incCallBack()\n        setResetDisable(false);\n        if (props.number >= props.maxValue - 1) {  setIncDisable(true) }\n       \n    }\n\n    let resetCallBack2 = () => { props.resetCallBack()\n         setIncDisable(false);\n        if (props.number <= props.startValue + 1) {  setResetDisable(true) }\n        \n    }\n\n     return (\n    <div className={s.displayResult}>\n            <DisplayResult number={props.number}\n             maxValue={props.maxValue}\n             startValue={props.startValue}\n             enterValue={props.enterValue}\n             errorInput1={props.errorInput1}\n             errorInput2={props.errorInput2} />\n        <div className={s.buttons}>\n            <Button title=\"inc\" incCallBack2={incCallBack2} incDisable={incDisable} />\n            <Button title=\"reset\" resetCallBack2={resetCallBack2} resetDisable={resetDisable} />\n           \n        </div>\n\n    </div>\n  );\n}\n\n\n\n","import React,  {useState} from 'react';\nimport './App.css';\nimport {CounterInputs} from \"./CounterInputs\";\nimport {CounterResult} from \"./CounterResult\";\n\nexport function App() {\n\n  let [errorInput1, setErrorInput1] = useState<boolean>(false)\n  let [errorInput2, setErrorInput2] = useState<boolean>(false)\n \n  let [enterValue, setEnterValue] = useState<boolean>(false)\n  \n  let [maxValue, setMaxValue]= useState(5)\n  let [startValue, setStartValue]= useState(0)\n  let [number, setNumber] = useState<number>(startValue)\n\n  const enterValueTrue = () => setEnterValue (true)\n  const toggleEnterValue = () => setEnterValue (!enterValue)\n\n  const changeMaxValue=(n:number)=>setMaxValue(n)\n  const changeStartValue=(n:number)=>setStartValue(n)\n  \n  const incCallBack = () => { number++; setNumber(number)}\n  const resetCallBack = () => { setNumber(startValue)}\n\n  \n\n   return (\n    <div className=\"container\">\n      <CounterInputs \n      maxValue={maxValue}\n       startValue={startValue}\n       changeMaxValue={changeMaxValue}\n       changeStartValue={changeStartValue}\n        number={number}\n         setNumber={setNumber}\n        enterValue={enterValue}\n        toggleEnterValue={toggleEnterValue}\n        enterValueTrue={enterValueTrue} \n        setErrorInput1={setErrorInput1}\n        setErrorInput2={setErrorInput2}\n        errorInput1={errorInput1}\n        errorInput2={errorInput2} />\n      <CounterResult\n      maxValue={maxValue}\n       startValue={startValue}\n       changeMaxValue={changeMaxValue}\n       changeStartValue={changeStartValue}\n       number={number} setNumber={setNumber}\n       incCallBack={incCallBack}\n       resetCallBack={resetCallBack}\n       enterValue={enterValue}\n       errorInput1={errorInput1}\n       errorInput2={errorInput2}/>\n        </div>\n    \n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}